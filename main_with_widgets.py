"""\nNews Portal MCP Server with ChatGPT Apps SDK Integration\n---------------------------------------------------------\nThis server provides news aggregation with rich UI widgets that render\nin ChatGPT using the Apps SDK and Model Context Protocol (MCP).\n\nKey features:\n- Proper widget metadata for ChatGPT rendering\n- MCP-compliant tool and resource registration\n- Carousel and card UI components\n- Structured content + widget templates\n"""\n\nfrom fastapi import FastAPI\nfrom fastapi.middleware.cors import CORSMiddleware\nfrom fastmcp import FastMCP\nfrom typing import List, Dict, Any, Optional\nfrom dataclasses import dataclass\nfrom datetime import datetime\nfrom copy import deepcopy\nimport json\nfrom pathlib import Path\n\n# Initialize FastAPI and FastMCP\napp = FastAPI(\n    title=\"News Portal MCP Server\",\n    description=\"News aggregation with ChatGPT Apps SDK widgets\",\n    version=\"1.0.0\"\n)\n\n# CORS middleware\napp.add_middleware(\n    CORSMiddleware,\n    allow_origins=[\"*\"],\n    allow_credentials=True,\n    allow_methods=[\"*\"],\n    allow_headers=[\"*\"],\n)\n\n# Initialize FastMCP\nmcp = FastMCP(\"News Portal\", dependencies=[\"fastapi\"])\n\n# Constants\nMIME_TYPE = \"text/html+skybridge\"\n\n# Mock news data\nMOCK_NEWS = [\n    {\n        \"id\": \"tech-1\",\n        \"title\": \"AI Breakthrough: New Language Model Achieves Human-Level Understanding\",\n        \"summary\": \"Researchers announce major advancement in NLP.\",\n        \"author\": \"Dr. Sarah Johnson\",\n        \"published_at\": \"2025-10-29T10:30:00Z\",\n        \"category\": \"technology\",\n        \"tags\": [\"AI\", \"NLP\", \"ML\"],\n        \"image_url\": \"https://via.placeholder.com/400x250/4A90E2/ffffff?text=AI+Breakthrough\",\n        \"source\": \"Tech Today\",\n        \"url\": \"https://example.com/ai-breakthrough\"\n    }\n]\n\n@dataclass\nclass NewsWidget:\n    identifier: str\n    title: str\n    template_uri: str\n    invoking: str\n    invoked: str\n    html: str\n    response_text: str\n\n# Widget HTML templates (inline for simplicity)\nCAROUSEL_HTML = \"\"\"\n<!DOCTYPE html>\n<html>\n<head>\n<style>\n* { margin: 0; padding: 0; box-sizing: border-box; }\nbody { font-family: -apple-system, sans-serif; }\n.carousel-container { padding: 20px; background: #f8f9fa; border-radius: 12px; }\n.news-card { background: white; border-radius: 12px; overflow: hidden; box-shadow: 0 2px 8px rgba(0,0,0,0.1); }\n.news-card img { width: 100%; height: 200px; object-fit: cover; }\n.news-content { padding: 20px; }\nh2 { font-size: 20px; margin-bottom: 12px; color: #1a1a1a; }\n</style>\n</head>\n<body>\n<div class=\"carousel-container\" id=\"newsCarousel\"></div>\n<script>\nconst articles = window.articles || [];\nconst carousel = document.getElementById('newsCarousel');\narticles.forEach(article => {\n  const card = document.createElement('div');\n  card.className = 'news-card';\n  card.innerHTML = `<img src=\"${article.image_url}\"><div class=\"news-content\"><h2>${article.title}</h2><p>${article.summary}</p></div>`;\n  carousel.appendChild(card);\n});\n</script>\n</body>\n</html>\n\"\"\"\n\nwidgets = [\n    NewsWidget(\n        identifier=\"news-carousel\",\n        title=\"Show News Carousel\",\n        template_uri=\"ui://widget/news-carousel.html\",\n        invoking=\"Loading news carousel\",\n        invoked=\"Displayed news carousel\",\n        html=CAROUSEL_HTML,\n        response_text=\"Here's a carousel of the latest news!\"\n    )\n]\n\ndef _tool_meta(widget: NewsWidget) -> Dict[str, Any]:\n    return {\n        \"openai/outputTemplate\": widget.template_uri,\n        \"openai/toolInvocation/invoking\": widget.invoking,\n        \"openai/toolInvocation/invoked\": widget.invoked,\n        \"openai/widgetAccessible\": True,\n        \"openai/resultCanProduceWidget\": True,\n    }\n\n@mcp._mcp_server.list_tools()\nasync def _list_tools():\n    from mcp import types\n    return [\n        types.Tool(\n            name=w.identifier,\n            title=w.title,\n            description=w.title,\n            inputSchema={\"type\": \"object\", \"properties\": {}},\n            _meta=_tool_meta(w),\n            annotations={\"readOnlyHint\": True}\n        ) for w in widgets\n    ]\n\n@mcp._mcp_server.list_resources()\nasync def _list_resources():\n    from mcp import types\n    return [\n        types.Resource(\n            uri=w.template_uri,\n            name=w.title,\n            mimeType=MIME_TYPE,\n            description=f\"{w.title} widget\"\n        ) for w in widgets\n    ]\n\n@mcp._mcp_server.read_resource()\nasync def _read_resource(uri: str):\n    from mcp import types\n    for w in widgets:\n        if w.template_uri == uri:\n            return [types.TextResourceContents(uri=uri, mimeType=MIME_TYPE, text=w.html, title=w.title)]\n    raise ValueError(f\"Resource not found: {uri}\")\n\n@mcp._mcp_server.call_tool()\nasync def _call_tool(name: str, arguments: Dict) -> List:\n    from mcp import types\n    widget = next((w for w in widgets if w.identifier == name), None)\n    if not widget:\n        raise ValueError(f\"Tool not found: {name}\")\n    \n    return [\n        types.TextContent(type=\"text\", text=widget.response_text),\n        types.TextContent(type=\"text\", text=f\"<script>window.articles = {json.dumps(MOCK_NEWS)};</script>\", annotations={\"mime_type\": \"text/html\"}),\n        types.EmbeddedResource(type=\"resource\", resource=types.TextResourceContents(uri=widget.template_uri, mimeType=MIME_TYPE, text=widget.html, title=widget.title))\n    ]\n\n@app.get(\"/\")\nasync def root():\n    return {\"status\": \"running\", \"mcp_endpoint\": \"/mcp\", \"widgets\": [w.identifier for w in widgets]}\n\n@app.get(\"/health\")\nasync def health():\n    return {\"status\": \"healthy\"}\n\napp.mount(\"/mcp\", mcp.get_asgi_app())\n\nif __name__ == \"__main__\":\n    import uvicorn\n    print(\"ðŸš€ News Portal MCP Server with Widget Support\")\n    print(\"âœ… Server: http://0.0.0.0:8000\")\n    print(\"âœ… MCP Endpoint: http://0.0.0.0:8000/mcp\")\n    uvicorn.run(app, host=\"0.0.0.0\", port=8000)\n"